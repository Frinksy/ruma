//! [POST /_matrix/identity/v2/3pid/bind](https://matrix.org/docs/spec/identity_service/r0.3.0#post-matrix-identity-v2-3pid-bind)

use std::collections::BTreeMap;

use js_int::UInt;
use ruma_api::ruma_api;
use ruma_common::thirdparty::Medium;
use ruma_identifiers::{ServerNameBox, ServerSigningKeyId, UserId};

ruma_api! {
    metadata: {
        description: "Publish an association between a session and a Matrix user ID.",
        method: POST,
        name: "bind_3pid",
        path: "/_matrix/identity/v2/3pid/bind",
        rate_limited: false,
        authentication: AccessToken,
    }

    request: {
        /// The Session ID generated by the `requestToken` call.
        pub sid: &'a str,

        /// The client secret passed to the `requestToken` call.
        pub client_secret: &'a str,

        /// The Matrix user ID to associate with the 3PIDs.
        pub mxid: &'a UserId,
    }

    response: {
        /// The 3PID address of the user being looked up.
        pub address: String,

        /// The medium type of the 3PID.
        pub medium: Medium,

        /// The Matrix user ID associated with the 3PID.
        pub mxid: UserId,

        /// A UNIX timestamp before which the association is not known to be valid.
        pub not_before: UInt,

        /// A UNIX timestamp after which the association is not known to be valid.
        pub not_after: UInt,

        /// The UNIX timestamp at which the association was verified.
        pub ts: UInt,

        /// The signatures of the verifiying identity servers which show that the
        /// association should be trusted, if you trust the verifying identity services.
        pub signatures: BTreeMap<ServerNameBox, BTreeMap<ServerSigningKeyId, String>>,
    }

}

impl<'a> Request<'a> {
    /// Creates a `Request` with the given Session ID, client secret and Matrix user ID.
    pub fn new(sid: &'a str, client_secret: &'a str, mxid: &'a UserId) -> Self {
        Self { sid, client_secret, mxid }
    }
}

impl Response {
    /// Creates a `Response` with the given 3PID address, medium, Matrix user ID, timestamps and
    /// signatures.
    pub fn new(
        address: String,
        medium: Medium,
        mxid: UserId,
        not_before: UInt,
        not_after: UInt,
        ts: UInt,
        signatures: BTreeMap<ServerNameBox, BTreeMap<ServerSigningKeyId, String>>,
    ) -> Self {
        Self { address, medium, mxid, not_before, not_after, ts, signatures }
    }
}
